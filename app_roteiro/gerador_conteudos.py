import os
import json
from pathlib import Path
from dotenv import load_dotenv
from openai import OpenAI
from app_roteiro.modulo_idioma import obter_instrucao_idioma

# Carrega API KEY
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise RuntimeError("‚ùå OPENAI_API_KEY n√£o encontrada no .env")

client = OpenAI(api_key=api_key)

def gerar_conteudos_topicos(canal, video_id, log=print):
    log(f"üìù Iniciando gera√ß√£o de conte√∫dos dos t√≥picos para {canal}/{video_id}...")

    control_path = Path("data") / canal / video_id / "control"
    topicos_path = control_path / "topicos.json"
    resumo_path = control_path / "resumo.json"
    introducao_path = control_path / "introducao.txt"
    config_canal_path = Path("db") / "canais" / f"{canal}.json"

    # Verifica√ß√µes
    if not topicos_path.exists():
        log(f"‚ùå Arquivo de t√≥picos n√£o encontrado: {topicos_path}")
        return False
    if not resumo_path.exists():
        log(f"‚ùå Resumo geral n√£o encontrado: {resumo_path}")
        return False
    if not introducao_path.exists():
        log(f"‚ùå Introdu√ß√£o n√£o encontrada: {introducao_path}")
        return False
    if not config_canal_path.exists():
        log(f"‚ùå Configura√ß√£o do canal n√£o encontrada: {config_canal_path}")
        return False

    # Carrega dados
    with open(topicos_path, "r", encoding="utf-8") as f:
        topicos_json = json.load(f)

    with open(resumo_path, "r", encoding="utf-8") as f:
        resumo_transcricao = json.load(f).get("resumo", "")

    with open(introducao_path, "r", encoding="utf-8") as f:
        base_anterior = f.read().strip()

    with open(config_canal_path, "r", encoding="utf-8") as f:
        config_canal = json.load(f)
        idioma = config_canal.get("idioma", "").lower()
        prompt_roteiro = config_canal.get("prompt_roteiro", "").strip()

    if not prompt_roteiro:
        log(f"‚ö†Ô∏è Prompt de roteiro n√£o definido para o canal {canal}.")
        return False

    instrucoes_idioma = obter_instrucao_idioma(idioma)
    topicos = topicos_json.get("topicos", [])

    if not topicos:
        log(f"‚ö†Ô∏è Nenhum t√≥pico encontrado no arquivo {topicos_path}")
        return False

    roteiros_gerados = []

    for i, topico in enumerate(topicos):
        numero = topico.get("numero")
        titulo = topico.get("titulo", "")
        resumo_topico = topico.get("resumo", "")

        # Pega o resumo do pr√≥ximo t√≥pico (se existir)
        proximo_resumo = ""
        if i + 1 < len(topicos):
            proximo_resumo = topicos[i + 1].get("resumo", "")

        # ‚ö° Instru√ß√£o de idioma bem expl√≠cita
        idioma_instrucao = ""
        if idioma == "es":
            idioma_instrucao = "‚ö° Escreva TODO o conte√∫do completamente em espanhol latino natural, sem misturar com portugu√™s ou ingl√™s."
        elif idioma == "en":
            idioma_instrucao = "‚ö° Write ALL the content completely in natural American English, without mixing with other languages."
        else:
            idioma_instrucao = "‚ö° Escreva TODO o conte√∫do completamente em portugu√™s brasileiro natural, sem misturar com outros idiomas."

        prompt = f"""
{idioma_instrucao}

Voc√™ √© um especialista em desenvolver conte√∫dos narrativos de alt√≠ssima qualidade para v√≠deos de YouTube, elaborados para criar uma forte conex√£o emocional e intelectual com o p√∫blico, independentemente do tema (sa√∫de, esportes, espiritualidade, finan√ßas, desenvolvimento pessoal, entre outros).

‚ö° Diretrizes obrigat√≥rias:

- O texto deve ser uma extens√£o cont√≠nua da base fornecida (n√£o criar sensa√ß√£o de rein√≠cio nem introdu√ß√µes paralelas).
- A linguagem deve ser intimista, concreta, emocionalmente v√≠vida, falando diretamente ao espectador como se fosse um conselho √∫nico e pessoal.
- N√£o utilizar express√µes gen√©ricas, met√°foras vazias, clich√™s emocionais ou frases de transi√ß√£o como ("vamos come√ßar", "vem comigo", "fique at√© o final", "no pr√≥ximo t√≥pico", "no pr√≥ximo tema", "em breve veremos", "logo exploraremos", etc.).
- Proibido mencionar t√©cnicas de escrita, marketing, roteiriza√ß√£o ou qualquer refer√™ncia metalingu√≠stica.
- Proibido concluir o texto com tom de encerramento: o final deve ser fluido e naturalmente aberto, mantendo a atmosfera viva para o pr√≥ximo trecho.
- Importante: Voc√™ est√° construindo um √∫nico v√≠deo dividido em partes (t√≥picos), portanto, **NUNCA** finalize ideias como se fossem fechar o assunto ou concluir um racioc√≠nio.
- Tamb√©m √© proibido preparar o p√∫blico explicitamente para o pr√≥ximo t√≥pico. N√£o fa√ßa previs√µes, chamadas ou antecipa√ß√µes for√ßadas. Mantenha a fluidez emocional cont√≠nua e natural.
- Cada frase deve carregar peso emocional real, com for√ßa narrativa e eleg√¢ncia, evitando exageros, redund√¢ncias ou qualquer quebra de atmosfera emocional.
- Foque em agregar valor real ao telespectador em cada par√°grafo, transmitindo autoridade, emo√ß√£o e credibilidade.

üìú Estrutura obrigat√≥ria baseada em frameworks de alta convers√£o:

- **ATENCI√ìN**: Capturar imediatamente a aten√ß√£o emocional do espectador nos primeiros 5 segundos.
- **INTER√âS**: Desenvolver uma conex√£o genu√≠na e profunda com os problemas, desejos ou aspira√ß√µes do p√∫blico.
- **DESEO + AUTORIDAD**: Apresentar solu√ß√µes, caminhos ou reflex√µes pr√°ticas com credibilidade natural, sem soar instrucional ou arrogante.

---

{prompt_roteiro}

Contexto geral do v√≠deo:
"{resumo_transcricao}"

Base do conte√∫do anterior para conex√£o:
"{base_anterior}"

Novo T√≠tulo do T√≥pico:
"{titulo}"

Resumo do Novo T√≥pico:
"{resumo_topico}"

Resumo do Pr√≥ximo T√≥pico (para transi√ß√£o emocional natural, se aplic√°vel):
"{proximo_resumo}"

{instrucoes_idioma}

üìù Gere agora a continua√ß√£o fluida, emocional, extremamente envolvente e conectada naturalmente com o pr√≥ximo tema, sem criar expectativas expl√≠citas e sem finalizar o racioc√≠nio:
"""

        try:
            resposta = client.chat.completions.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.6,
            )

            conteudo_gerado = resposta.choices[0].message.content.strip()
            base_anterior = conteudo_gerado

            roteiros_gerados.append({
                "numero": numero,
                "titulo": titulo,
                "conteudo": conteudo_gerado
            })

            log(f"‚úÖ Conte√∫do gerado para T√≥pico {numero}")

        except Exception as e:
            log(f"‚ùå Erro ao gerar conte√∫do para T√≥pico {numero}: {e}")
            return False

    roteiros_path = control_path / "roteiros.json"
    with open(roteiros_path, "w", encoding="utf-8") as f:
        json.dump({"roteiros": roteiros_gerados}, f, indent=4, ensure_ascii=False)

    log(f"‚úÖ Todos conte√∫dos salvos em {roteiros_path}")
    return True
