import os
import json
from pathlib import Path
from dotenv import load_dotenv
from openai import OpenAI

# Carrega a chave da OpenAI do .env
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")

if not api_key:
    raise RuntimeError("‚ùå OPENAI_API_KEY n√£o encontrada no .env")

client = OpenAI(api_key=api_key)

def gerar_resumo(canal, video_id, log=print):
    log(f"üß† Gerando resumo para {canal}/{video_id}...")

    video_path = Path("data") / canal / video_id
    control_path = video_path / "control"
    transcript_path = control_path / "transcript_original.json"
    resumo_path = control_path / "resumo.json"

    # Se j√° existe o resumo, pula
    if resumo_path.exists():
        log(f"üìÑ Resumo j√° existente em {resumo_path}")
        return True

    # Verifica se existe a transcri√ß√£o
    if not transcript_path.exists():
        log(f"‚ùå Transcri√ß√£o n√£o encontrada em {transcript_path}")
        return False

    with open(transcript_path, "r", encoding="utf-8") as f:
        texto = json.load(f)

    if not texto or not isinstance(texto, str):
        log(f"‚ö†Ô∏è Transcri√ß√£o inv√°lida ou vazia.")
        return False

    prompt = (
        "Voc√™ √© um assistente especialista em an√°lise de conte√∫do de v√≠deos do YouTube, com foco em compreens√£o profunda, segmenta√ß√£o de t√≥picos e extra√ß√£o de ideias centrais. "
        "Abaixo est√° a transcri√ß√£o completa de um v√≠deo. Sua tarefa √© gerar um resumo avan√ßado e estruturado, como se fosse uma apresenta√ß√£o escrita para um briefing editorial.\n\n"
        
        "‚öôÔ∏è **Instru√ß√µes espec√≠ficas:**\n"
        "1. Leia todo o conte√∫do cuidadosamente.\n"
        "2. Identifique e liste os principais t√≥picos abordados, com subt√≠tulos claros se necess√°rio.\n"
        "3. Para cada t√≥pico, explique o que foi dito com detalhes, destacando as ideias principais, exemplos utilizados, dados mencionados ou hist√≥rias relatadas.\n"
        "4. Se houver momentos de opini√£o, cr√≠tica, humor, instru√ß√£o ou ensinamento, destaque-os separadamente.\n"
        "5. Use linguagem clara, profissional e flu√≠da, como se estivesse explicando o conte√∫do a um leitor que precisa entender tudo sem ver o v√≠deo.\n"
        "6. Mantenha a organiza√ß√£o l√≥gica e sequencial do v√≠deo, respeitando a ordem dos acontecimentos.\n\n"
        
        f"üéôÔ∏è **Transcri√ß√£o original do v√≠deo:**\n{texto}\n\n"
        "‚úçÔ∏è **Gere agora o resumo completo e detalhado conforme solicitado acima:**"
    )


    try:
        resposta = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
        )
        resumo = resposta.choices[0].message.content.strip()

        with open(resumo_path, "w", encoding="utf-8") as f:
            json.dump({"resumo": resumo}, f, indent=4, ensure_ascii=False)

        log(f"‚úÖ Resumo salvo em {resumo_path}")
        return True

    except Exception as e:
        log(f"‚ùå Erro ao gerar resumo: {e}")
        return False
