import os
import json
from pathlib import Path
from dotenv import load_dotenv
from openai import OpenAI
from app_roteiro.modulo_idioma import obter_instrucao_idioma

# Carregar API_KEY do arquivo .env
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise RuntimeError("‚ùå OPENAI_API_KEY n√£o encontrada no .env")

client = OpenAI(api_key=api_key)

def gerar_introducao(canal, video_id, log=print):
    log(f"üé¨ Gerando introdu√ß√£o para {canal}/{video_id}...")

    control_path = Path("data") / canal / video_id / "control"
    topicos_path = control_path / "topicos.json"
    introducao_path = control_path / "introducao.txt"
    canal_config_path = Path("db") / "canais" / f"{canal}.json"

    if introducao_path.exists():
        log(f"‚ö†Ô∏è Introdu√ß√£o j√° existente para {canal}/{video_id}.")
        return True

    if not topicos_path.exists():
        log(f"‚ùå Arquivo de t√≥picos n√£o encontrado em {topicos_path}.")
        return False

    if not canal_config_path.exists():
        log(f"‚ùå Arquivo de configura√ß√£o do canal n√£o encontrado em {canal_config_path}.")
        return False

    # Corrigido para carregar o JSON
    with open(topicos_path, "r", encoding="utf-8") as f:
        topicos_json = json.load(f)

    # Monta o texto dos t√≥picos para usar no prompt
    topicos = ""
    for topico in topicos_json.get("topicos", []):
        topicos += f'- {topico["titulo"]}: {topico["resumo"]}\n'

    with open(canal_config_path, "r", encoding="utf-8") as f:
        canal_config = json.load(f)
        idioma_configurado = canal_config.get("idioma", "").lower()

    # Pega a instru√ß√£o correta do idioma
    instrucoes_idioma = obter_instrucao_idioma(idioma_configurado)

    prompt = f"""
Voc√™ √© um especialista em cria√ß√£o de introdu√ß√µes para v√≠deos de YouTube, focadas em **captar imediatamente a aten√ß√£o emocional e racional do p√∫blico**, sem utilizar frases gen√©ricas, m√≠sticas ou vagas.

Sua miss√£o √© criar uma introdu√ß√£o curta (m√°ximo 200 palavras) para o canal "{canal}", considerando os t√≥picos apresentados abaixo, de forma a:

- Entrar diretamente na dor, no desejo ou na necessidade real que o p√∫blico enfrenta.
- Despertar uma sensa√ß√£o urgente e genu√≠na de identifica√ß√£o e esperan√ßa.
- Deixar claro, de forma sutil e emocional, que o conte√∫do do v√≠deo trar√° respostas pr√°ticas, reveladoras ou transformadoras, alinhadas com as expectativas da audi√™ncia.
- Utilizar uma linguagem emocionalmente intensa, **sem abstra√ß√µes vagas, sem met√°foras gen√©ricas, sem textos po√©ticos irreais**.
- Utilizar frases fortes, espec√≠ficas, diretas e com peso emocional ‚Äî como se estivesse falando com uma pessoa que realmente precisa daquele conte√∫do.
- Manter o fluxo natural e fluido, **sem soar como abertura formal de v√≠deo** e **sem finaliza√ß√£o expl√≠cita**.

‚ö†Ô∏è **Proibi√ß√µes obrigat√≥rias**:
- N√ÉO usar frases como "Em um rinc√≥n do universo...", "Hoje vamos falar sobre...", "Neste v√≠deo voc√™ ver√°...", "Prepare-se para...", "Acompanhe at√© o final", etc.
- N√ÉO mencionar m√©todos, t√©cnicas, marketing, ou conceitos metalingu√≠sticos.
- N√ÉO escrever de forma gen√©rica, m√≠stica vaga, ou fantasiosa.
- N√ÉO utilizar comandos ou chamadas diretas √† a√ß√£o.

Use os t√≥picos abaixo como refer√™ncia direta para construir uma abertura emocionalmente forte, **sem cit√°-los literalmente**:

T√≥picos do V√≠deo:
{topicos}

{instrucoes_idioma}

üìù Crie agora a introdu√ß√£o: curta, impactante, emocionalmente envolvente e naturalmente fluida.
"""


    try:
        resposta = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.8,
        )

        introducao_gerada = resposta.choices[0].message.content.strip()

        with open(introducao_path, "w", encoding="utf-8") as f:
            f.write(introducao_gerada)

        log(f"‚úÖ Introdu√ß√£o salva em {introducao_path}")
        return True

    except Exception as e:
        log(f"‚ùå Erro ao gerar introdu√ß√£o: {e}")
        return False
