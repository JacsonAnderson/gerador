# vf_roteiro.py
import re
import os
import json, re
import sqlite3
from pathlib import Path

# Importante para o baixar_legenda_yt
import yt_dlp


# Importante para usar o chat gpt
from dotenv import load_dotenv
from openai import OpenAI




# ------------------------------------------------------------------
# 1) Carregamento de configs direto do SQLite
# ------------------------------------------------------------------
VIDEOS_DB_PATH = Path("data/videos.db")

def _carregar_configs(canal: str, video_id: str) -> dict:
    """Busca configs JSON diretamente na tabela videos."""
    with sqlite3.connect(VIDEOS_DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute(
            "SELECT configs FROM videos WHERE canal = ? AND video_id = ?",
            (canal, video_id)
        )
        row = cur.fetchone()
    if not row:
        return {}
    try:
        return json.loads(row[0])
    except:
        return {}


# ------------------------------------------------------------------
# 2) Inicializa√ß√£o do cliente OpenAI
# ------------------------------------------------------------------
load_dotenv()
_api_key = os.getenv("OPENAI_API_KEY")
if not _api_key:
    raise RuntimeError("‚ùå OPENAI_API_KEY n√£o encontrada no .env")
_client = OpenAI(api_key=_api_key)

log_callback = print  # Voc√™ pode sobrescrever via set_logger, se quiser

def set_logger(callback):
    global log_callback
    log_callback = callback


# ------------------------------------------------------------------
# 3) Baixar e extrair transcri√ß√£o do YouTube
# ------------------------------------------------------------------

def baixar_legenda_yt(url, prioridade_idiomas=None, pasta_destino="."):
    """
    Baixa UMA legenda autom√°tica do YouTube na ordem en > es > pt > qualquer outro.
    Retorna: (transcricao_texto, idioma_utilizado) ou (None, None).
    Remove todos os .vtt depois de usar.
    """
    Path(pasta_destino).mkdir(parents=True, exist_ok=True)
    if prioridade_idiomas is None:
        prioridade_idiomas = ['en', 'es', 'pt']

    ydl_opts = {
        'writesubtitles': True,
        'writeautomaticsub': True,
        'skip_download': True,
        'outtmpl': f"{pasta_destino}/%(id)s.%(ext)s",
        'quiet': True,
    }

    log_callback(f" ‚úÖ Baixando legendas de: {url}")
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        try:
            info = ydl.extract_info(url, download=True)
            yt_id = info['id']
            log_callback(f" ‚úÖ YouTube ID detectado: {yt_id}")
        except Exception as e:
            log_callback(f" ‚ö†Ô∏è Erro no extract_info: {e}")
            return None, None

    # coleta todos os VTTs
    vtt_files = list(Path(pasta_destino).glob(f"{yt_id}.*.vtt"))
    log_callback(f" ‚úÖ VTTs baixados: {[f.name for f in vtt_files]}")

    # escolhe por prioridade
    escolhida = None
    idioma = None
    for lang in prioridade_idiomas:
        for f in vtt_files:
            if f.stem.endswith(lang):
                escolhida = f
                idioma = lang
                break
        if escolhida:
            break

    # se n√£o achou priorit√°rio, pega o primeiro
    if not escolhida and vtt_files:
        escolhida = vtt_files[0]
        idioma = escolhida.stem.split('.')[-1]
        log_callback(f" ‚ö†Ô∏è Sem prioridade, usando: {escolhida.name}")

    if not escolhida:
        log_callback(" ‚ö†Ô∏è Nenhum VTT encontrado.")
        return None, None

    # extrai o texto
    linhas = escolhida.read_text(encoding="utf-8").splitlines()
    legendas = []
    for l in linhas:
        l = l.strip()
        if (not l
            or l.startswith(("WEBVTT", "Kind:", "Language:"))
            or "-->" in l
            or "align:" in l
            or "position:" in l):
            continue
        texto = re.sub(r"<.*?>", "", l)
        if re.search(r'\[(music|m√∫sica|musique|musik|musica)\]', texto, re.IGNORECASE):
            continue
        legendas.append(texto)

    transcricao = " ".join(legendas).strip()
    log_callback(f" ‚úÖ Texto extra√≠do: {len(transcricao)} chars")

    # limpa todos os .vtt
    for f in vtt_files:
        try:
            f.unlink()
        except:
            pass

    return transcricao, idioma


# ------------------------------------------------------------------
# 4) Gerar resumo e injetar em metadados.json
# ------------------------------------------------------------------

def gerar_resumo(canal: str, video_id: str) -> bool:
    """
    Gera um resumo a partir de data/{canal}/{video_id}/control/transcript_original.json
    e injeta esse resumo dentro de data/{canal}/{video_id}/control/metadados.json
    na chave "resumo". Retorna True se sucesso.
    """
    cp = Path("data") / canal / video_id / "control"
    transcript = cp / "transcript_original.json"
    meta_path  = cp / "metadados.json"

    if not transcript.exists():
        log_callback(f" ‚ö†Ô∏è Transcri√ß√£o n√£o encontrada em {transcript}")
        return False
    if not meta_path.exists():
        log_callback(f" ‚ö†Ô∏è metadados.json n√£o encontrado em {meta_path}")
        return False

    # carrega transcri√ß√£o limpa
    dados_trans = json.loads(transcript.read_text(encoding="utf-8"))
    txt = dados_trans.get("transcricao_limpa") if isinstance(dados_trans, dict) else ""
    if not txt or not txt.strip():
        log_callback(" ‚ö†Ô∏è Transcri√ß√£o vazia.")
        return False

    prompt = (
        "Voc√™ √© um assistente especialista em an√°lise de conte√∫do de v√≠deos do YouTube, com foco em compreens√£o profunda, segmenta√ß√£o de t√≥picos e extra√ß√£o de ideias centrais. "
        "Abaixo est√° a transcri√ß√£o completa de um v√≠deo. Sua tarefa √© gerar um resumo avan√ßado e estruturado, como se fosse uma apresenta√ß√£o escrita para um briefing editorial.\n\n"
        
        "‚öôÔ∏è **Instru√ß√µes espec√≠ficas:**\n"
        "1. Leia todo o conte√∫do cuidadosamente.\n"
        "2. Identifique e liste os principais t√≥picos abordados, com subt√≠tulos claros se necess√°rio.\n"
        "3. Para cada t√≥pico, explique o que foi dito com detalhes, destacando as ideias principais, exemplos utilizados, dados mencionados ou hist√≥rias relatadas.\n"
        "4. Se houver momentos de opini√£o, cr√≠tica, humor, instru√ß√£o ou ensinamento, destaque-os separadamente.\n"
        "5. Use linguagem clara, profissional e flu√≠da, como se estivesse explicando o conte√∫do a um leitor que precisa entender tudo sem ver o v√≠deo.\n"
        "6. Mantenha a organiza√ß√£o l√≥gica e sequencial do v√≠deo, respeitando a ordem dos acontecimentos.\n\n"
        
        f"üéôÔ∏è **Transcri√ß√£o original do v√≠deo:**\n{txt}\n\n"
        "‚úçÔ∏è **Gere agora o resumo completo e detalhado conforme solicitado acima:**"
    )

    try:
        resp = _client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role":"user","content":prompt}],
            temperature=0.7
        )
        resumo_text = resp.choices[0].message.content.strip()

        # agora abrimos o metadados.json, injetamos o resumo e salvamos
        meta = json.loads(meta_path.read_text(encoding="utf-8"))
        meta["resumo"] = resumo_text
        meta_path.write_text(
            json.dumps(meta, ensure_ascii=False, indent=4),
            encoding="utf-8"
        )

        log_callback(f" ‚úÖ Resumo salvo em {meta_path}")
        return True

    except Exception as e:
        log_callback(f" ‚ö†Ô∏è Erro ao gerar resumo: {e}")
        return False


# ------------------------------------------------------------------
# 5) Gerar t√≥picos 
# ------------------------------------------------------------------
def gerar_topicos(canal: str, video_id: str) -> bool:
    control_dir    = Path("data") / canal / video_id / "control"
    metadados_path = control_dir / "metadados.json"
    transcript_p    = control_dir / "transcript_original.json"

    # 1) j√° gerado?
    meta = json.loads(metadados_path.read_text(encoding="utf-8"))
    if meta.get("topicos"):
        log_callback(" ‚úÖ T√≥picos j√° existem em metadados.json. Pulando.")
        return True

    # 2) transcript ok?
    if not transcript_p.exists():
        log_callback(" ‚ö†Ô∏è Transcri√ß√£o n√£o encontrada. N√£o foi poss√≠vel gerar t√≥picos.")
        return False
    dados = json.loads(transcript_p.read_text(encoding="utf-8"))
    txt   = dados.get("transcricao_limpa", "") if isinstance(dados, dict) else ""
    if not txt.strip():
        log_callback(" ‚ö†Ô∏è Transcri√ß√£o vazia. N√£o foi poss√≠vel gerar t√≥picos.")
        return False

    # 3) carrega prompt_topicos (DB ou prompts.json)
    cfg        = _carregar_configs(canal, video_id)
    prompt_top = cfg.get("prompt_topicos", "").strip()
    if not prompt_top:
        prompts_file = Path("data") / canal / "prompts.json"
        if prompts_file.exists():
            j = json.loads(prompts_file.read_text(encoding="utf-8"))
            prompt_top = j.get("prompt_topicos", "").strip()
    if not prompt_top:
        log_callback(" ‚ö†Ô∏è prompt_topicos n√£o definido. N√£o foi poss√≠vel gerar t√≥picos.")
        return False

    # 4) monta prompt final
    idioma  = (cfg.get("idioma", "") or "").lower()
    inst_id = obter_instrucao_idioma(idioma)

    prompt_final = f"""{prompt_top}

Transcri√ß√£o para refer√™ncia:
{txt}

‚ö†Ô∏è IMPORTANTE: Gere exatamente no formato abaixo, sem coment√°rios extras e mantendo o n√∫mero exato de t√≥picos (nem mais, nem menos):

‚ö†Ô∏è Estes t√≥picos devem ser direto ao ponto. Exemplo: se o v√≠deo √© sobre "4 rem√©dios para curar o cora√ß√£o",
  - T√≥pico 01 fala sobre o problema  
  - T√≥pico 02 fala sobre o Rem√©dio 01  
  - T√≥pico 03 fala sobre o Rem√©dio 02  
  ‚Ä¶e assim por diante.

‚ö†Ô∏è Vamos evitar t√≥picos gen√©ricos! Foque no que foi dito na transcri√ß√£o e agregue valor real ao conte√∫do.  
‚ö†Ô∏è Cada t√≥pico deve ser √∫til para a cria√ß√£o de conte√∫dos altamente relevantes e impactantes.  

{inst_id}

Topico 01: "T√çTULO IMPACTANTE E PERSUASIVO DO T√ìPICO 01"  
RESUMO: "Descri√ß√£o clara e detalhada do que esse t√≥pico aborda."

Topico 02: "T√çTULO IMPACTANTE E PERSUASIVO DO T√ìPICO 02"  
RESUMO: "Descri√ß√£o clara e detalhada do que esse t√≥pico aborda."

Topico 03: "T√çTULO IMPACTANTE E PERSUASIVO DO T√ìPICO 03"  
RESUMO: "Descri√ß√£o clara e detalhada do que esse t√≥pico aborda."

‚Ä¶ (Continue exatamente nesse formato at√© completar o n√∫mero exato de t√≥picos solicitados)
"""

    # 5) chama OpenAI e extrai via regex
    resp = _client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role":"user","content":prompt_final}],
        temperature=0.4
    )
    out = resp.choices[0].message.content.strip()

    pad   = r'[Tt][o√≥]pico\s*(\d+):\s*"([^"]+)"\s*RESUMO:\s*"([^"]+)"'
    found = re.findall(pad, out, re.IGNORECASE)
    if not found:
        log_callback(" ‚ö†Ô∏è Nenhum t√≥pico detectado pela regex.")
        return False

    lista = [
        {"numero": int(n), "titulo": t.strip(), "resumo": r.strip()}
        for n, t, r in found
    ]

    # 6) injeta em metadados.json
    meta["topicos"] = lista
    metadados_path.write_text(
        json.dumps(meta, ensure_ascii=False, indent=4),
        encoding="utf-8"
    )
    return True


# ------------------------------------------------------------------
# 6) Gerar introdu√ß√£o e injetar em metadados.json
# ------------------------------------------------------------------
def gerar_introducao(canal: str, video_id: str) -> bool:
    """
    Gera uma introdu√ß√£o curta e impactante a partir dos t√≥picos em metadados.json
    e injeta esse texto na chave "introducao" dentro de data/{canal}/{video_id}/control/metadados.json.
    """
    control_dir = Path("data") / canal / video_id / "control"
    meta_path   = control_dir / "metadados.json"

    # 1) pr√©-requisitos
    if not meta_path.exists():
        log_callback(f" ‚ö†Ô∏è metadados.json n√£o encontrado em {meta_path}")
        return False

    meta = json.loads(meta_path.read_text(encoding="utf-8"))
    if meta.get("introducao"):
        log_callback("  ‚úÖ Introdu√ß√£o j√° existe em metadados.json. Pulando.")
        return True

    topicos = meta.get("topicos")
    if not topicos or not isinstance(topicos, list):
        log_callback(" ‚ö†Ô∏è T√≥picos n√£o encontrados em metadados.json. N√£o foi poss√≠vel gerar introdu√ß√£o.")
        return False

    # 2) monta a lista de t√≥picos para o prompt
    lista_markdown = "".join(f"- {t['titulo']}: {t['resumo']}\n" for t in topicos)

    # 3) carrega configs para instru√ß√µes de idioma
    cfg     = _carregar_configs(canal, video_id)
    idioma  = (cfg.get("idioma") or "").lower()
    inst_id = obter_instrucao_idioma(idioma)

    # 4) monta o prompt
    prompt = f"""
Voc√™ √© um especialista em cria√ß√£o de introdu√ß√µes altamente persuasivas e emocionalmente impactantes para v√≠deos de YouTube. Seu trabalho √© capturar imediatamente a aten√ß√£o do p√∫blico e gerar um forte desejo de continuar assistindo, usando frases que toquem nas dores reais, nos desejos ocultos e nas promessas transformadoras que o v√≠deo pode entregar.

Sua miss√£o √© criar uma introdu√ß√£o curta (m√°ximo 150 palavras) para o canal "{canal}", baseada nos t√≥picos abaixo, respeitando as diretrizes obrigat√≥rias:

‚ö° Diretrizes obrigat√≥rias:
- A primeira frase deve **impactar diretamente o emocional ou o racional do espectador em menos de 5 segundos**, com uma dor, desejo ou pergunta instigante.
- A introdu√ß√£o deve criar uma **conex√£o real com o p√∫blico**, fazendo com que ele se sinta compreendido em sua dor, ansiedade, d√∫vida ou busca pessoal.
- Em seguida, apresente **uma promessa concreta**, uma transforma√ß√£o que ser√° abordada no v√≠deo ‚Äî **sem soar como t√©cnica de marketing**, mas com **autoridade natural** e tom de revela√ß√£o importante.
- Finalize com uma **frase fluida e emocional**, sem dar fechamento ou comandos expl√≠citos ‚Äî apenas mantendo a tens√£o emocional viva, como um gancho natural que conduz ao pr√≥ximo conte√∫do.

üìå Linguagem:
- Escreva com frases fortes, curtas, emocionalmente v√≠vidas e espec√≠ficas.
- Fale com **clareza**, **urg√™ncia emocional**, **sem abstra√ß√µes**, **sem met√°foras m√≠sticas** e **sem floreios po√©ticos gen√©ricos**.
- Parece uma conversa sincera com algu√©m que realmente precisa ouvir isso ‚Äî e **n√£o** uma abertura formal de v√≠deo.

üö´ Proibi√ß√µes obrigat√≥rias:
- **N√ÉO** use frases como: ‚ÄúNeste v√≠deo voc√™ ver√°‚Ä¶‚Äù, ‚ÄúHoje falaremos sobre‚Ä¶‚Äù, ‚ÄúEm um rinc√≥n do universo‚Ä¶‚Äù, ‚ÄúPrepare-se para‚Ä¶‚Äù, ‚ÄúAcompanhe at√© o final‚Ä¶‚Äù.
- **N√ÉO** mencione t√©cnicas, m√©todos, sistemas, estrat√©gias, marketing, nem qualquer termo metalingu√≠stico.
- **N√ÉO** escreva de forma gen√©rica, m√≠stica, vaga, motivacional de autoajuda ou fantasiosa.
- **N√ÉO** finalize o texto com frases de encerramento. A introdu√ß√£o deve ser como um ‚Äúgancho emocional‚Äù que leva direto para o primeiro t√≥pico do v√≠deo.

Use os t√≥picos abaixo como refer√™ncia **sem copi√°-los literalmente**, para construir uma introdu√ß√£o intensa e altamente persuasiva:

üìã **T√≥picos do V√≠deo (n√£o copie literalmente, use como base):**
{lista_markdown}

{inst_id}

üìù Crie agora a introdu√ß√£o: curta, impactante, emocionalmente envolvente, com promessa clara, sem encerramento expl√≠cito e com um gancho natural que leve ao primeiro conte√∫do.
"""

    # 5) chama a API
    try:
        resp = _client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.8,
        )
        introducao = resp.choices[0].message.content.strip()

        # 6) injeta e salva
        meta["introducao"] = introducao
        meta_path.write_text(
            json.dumps(meta, ensure_ascii=False, indent=4),
            encoding="utf-8"
        )

        log_callback(f" ‚úÖ Introdu√ß√£o salva em {meta_path}")
        return True

    except Exception as e:
        log_callback(f" ‚ö†Ô∏è Erro ao gerar introdu√ß√£o: {e}")
        return False



# ------------------------------------------------------------
# Dicion√°rio de idiomas (deixa tudo isso aqui embaixo, sem misturar)
# ------------------------------------------------------------

IDIOMAS_SUPORTADOS = {
    "pt": {
        "nome": "Portugu√™s Brasileiro",
        "instrucao": "\n\n‚ö†Ô∏è IMPORTANTE: Toda a resposta deve obrigatoriamente ser escrita em Portugu√™s Brasileiro correto, com clareza e sem regionalismos excessivos."
    },
    "es": {
        "nome": "Espanhol Neutro",
        "instrucao": "\n\n‚ö†Ô∏è IMPORTANTE: Toda a resposta deve obrigatoriamente ser escrita em Espanhol neutro latino, com clareza e sem misturar portugu√™s ou outros idiomas."
    },
    "en": {
        "nome": "Ingl√™s",
        "instrucao": "\n\n‚ö†Ô∏è IMPORTANTE: Toda a resposta deve obrigatoriamente ser escrita em Ingl√™s fluente, natural e de f√°cil entendimento para o p√∫blico global."
    },
    "fr": {
        "nome": "Franc√™s",
        "instrucao": "\n\n‚ö†Ô∏è IMPORTANTE: Toda a resposta deve obrigatoriamente ser escrita em Franc√™s europeu padr√£o, com clareza e eleg√¢ncia."
    },
    "de": {
        "nome": "Alem√£o",
        "instrucao": "\n\n‚ö†Ô∏è IMPORTANTE: Toda a resposta deve obrigatoriamente ser escrita em Alem√£o padr√£o (Hochdeutsch), formal e claro."
    },
    "it": {
        "nome": "Italiano",
        "instrucao": "\n\n‚ö†Ô∏è IMPORTANTE: Toda a resposta deve obrigatoriamente ser escrita em Italiano formal, elegante e de f√°cil compreens√£o."
    },
    "ja": {
        "nome": "Japon√™s",
        "instrucao": "\n\n‚ö†Ô∏è IMPORTANTE: Toda a resposta deve obrigatoriamente ser escrita em Japon√™s formal (Êó•Êú¨Ë™û), com clareza e respeito pela cultura local."
    },
    "zh": {
        "nome": "Chin√™s (Mandarim Simplificado)",
        "instrucao": "\n\n‚ö†Ô∏è IMPORTANTE: Toda a resposta deve obrigatoriamente ser escrita em Chin√™s Mandarim Simplificado (‰∏≠ÊñáÁÆÄ‰Ωì), de forma clara e profissional."
    },
    "ru": {
        "nome": "Russo",
        "instrucao": "\n\n‚ö†Ô∏è IMPORTANTE: Toda a resposta deve obrigatoriamente ser escrita em Russo padr√£o, com linguagem formal e respeitosa."
    },
    "ar": {
        "nome": "√Årabe",
        "instrucao": "\n\n‚ö†Ô∏è IMPORTANTE: Toda a resposta deve obrigatoriamente ser escrita em √Årabe moderno padr√£o (ÿßŸÑŸÅÿµÿ≠Ÿâ), claro e respeitando normas culturais."
    },
    "hi": {
        "nome": "Hindi",
        "instrucao": "\n\n‚ö†Ô∏è IMPORTANTE: Toda a resposta deve obrigatoriamente ser escrita em Hindi formal (‡§π‡§ø‡§®‡•ç‡§¶‡•Ä), de forma clara e culturalmente respeitosa."
    },
    "tr": {
        "nome": "Turco",
        "instrucao": "\n\n‚ö†Ô∏è IMPORTANTE: Toda a resposta deve obrigatoriamente ser escrita em Turco padr√£o, com linguagem clara e respeitosa."
    },
    "nl": {
        "nome": "Holand√™s",
        "instrucao": "\n\n‚ö†Ô∏è IMPORTANTE: Toda a resposta deve obrigatoriamente ser escrita em Holand√™s padr√£o (Nederlands), claro e natural."
    },
    "pl": {
        "nome": "Polon√™s",
        "instrucao": "\n\n‚ö†Ô∏è IMPORTANTE: Toda a resposta deve obrigatoriamente ser escrita em Polon√™s padr√£o, claro e fluente."
    },
    "ko": {
        "nome": "Coreano",
        "instrucao": "\n\n‚ö†Ô∏è IMPORTANTE: Toda a resposta deve obrigatoriamente ser escrita em Coreano padr√£o (ÌïúÍµ≠Ïñ¥), claro e natural."
    },
    "sv": {
        "nome": "Sueco",
        "instrucao": "\n\n‚ö†Ô∏è IMPORTANTE: Toda a resposta deve obrigatoriamente ser escrita em Sueco padr√£o, claro e profissional."
    },
    "no": {
        "nome": "Noruegu√™s",
        "instrucao": "\n\n‚ö†Ô∏è IMPORTANTE: Toda a resposta deve obrigatoriamente ser escrita em Noruegu√™s padr√£o (Bokm√•l), claro e respeitoso."
    },
    "da": {
        "nome": "Dinamarqu√™s",
        "instrucao": "\n\n‚ö†Ô∏è IMPORTANTE: Toda a resposta deve obrigatoriamente ser escrita em Dinamarqu√™s padr√£o, claro e natural."
    },
    "fi": {
        "nome": "Finland√™s",
        "instrucao": "\n\n‚ö†Ô∏è IMPORTANTE: Toda a resposta deve obrigatoriamente ser escrita em Finland√™s padr√£o, claro e fluido."
    },
    "id": {
        "nome": "Indon√©sio",
        "instrucao": "\n\n‚ö†Ô∏è IMPORTANTE: Toda a resposta deve obrigatoriamente ser escrita em Indon√©sio (Bahasa Indonesia), claro e natural."
    },
    "vi": {
        "nome": "Vietnamita",
        "instrucao": "\n\n‚ö†Ô∏è IMPORTANTE: Toda a resposta deve obrigatoriamente ser escrita em Vietnamita padr√£o, claro e respeitoso."
    },
    "ms": {
        "nome": "Malaio",
        "instrucao": "\n\n‚ö†Ô∏è IMPORTANTE: Toda a resposta deve obrigatoriamente ser escrita em Malaio padr√£o, claro e natural."
    },
}

def obter_instrucao_idioma(codigo_idioma):
    """Retorna a instru√ß√£o correta para o idioma especificado."""
    return IDIOMAS_SUPORTADOS.get(codigo_idioma.lower(), {}).get("instrucao", "")

