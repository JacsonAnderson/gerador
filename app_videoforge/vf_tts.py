# vf_tts.py

import json
from pathlib import Path
from app_videoforge.vf_roteiro import log_callback

def gerar_audio_piper(canal: str, video_id: str) -> bool:
    log_callback(f"üéôÔ∏è [Piper] INDISPON√çVEL‚Ä¶ VOU IMPLEMENTAR ISSO FUTURAMENTE! ")
    return True

def gerar_audio_elevenlabs(canal: str, video_id: str) -> bool:
    """
    1) Se roteiro.txt N√ÉO existe em data/{canal}/{video_id}/control, gera-o aqui e sai.
    2) Se roteiro.txt j√° existe, mas n√£o h√° pasta tts/, apenas sai (aguardando voc√™ colocar os MP3s).
    3) Se roteiro.txt existe e tts/ existe, entra no fluxo de processar os MP3s (TODO).
    """
    control_dir      = Path("data") / canal / video_id / "control"
    meta_path        = control_dir / "metadados.json"
    roteiro_txt_path = control_dir / "roteiro.txt"
    tts_dir          = control_dir / "tts"

    # pr√©: metadados.json deve existir
    if not meta_path.exists():
        log_callback(f"‚ö†Ô∏è metadados.json n√£o encontrado em {meta_path}")
        return False

    # 1) gerar roteiro.txt na primeira vez
    if not roteiro_txt_path.exists():
        meta   = json.loads(meta_path.read_text(encoding="utf-8"))
        blocos = meta.get("conteudos", [])
        if not blocos:
            log_callback("‚ö†Ô∏è Nenhum conte√∫do para TTS encontrado em metadados.json.")
            return False

        roteiro_txt = ""
        for bloco in blocos:
            titulo   = bloco.get("titulo", "").strip()
            conteudo = bloco.get("conteudo", "").strip()
            roteiro_txt += f"{titulo}. {conteudo}\n\n"

        roteiro_txt_path.write_text(roteiro_txt, encoding="utf-8")
        log_callback(f"‚úÖ roteiro.txt gerado em {roteiro_txt_path}")
        return True

    # 2) roteiro.txt j√° existe: espera a pasta tts/ aparecer
    if not tts_dir.exists():
        log_callback(f"‚è≠ roteiro.txt encontrado, aguardando √°udios em {tts_dir}‚Ä¶ Pulando.")
        return True

    # 3) tts/ existe: aqui voc√™ processaria os MP3s que colocou l√°
    mp3s = sorted(tts_dir.glob("*.mp3"))
    if not mp3s:
        log_callback(f"‚ö†Ô∏è Pasta {tts_dir} est√° vazia. Aguarde os arquivos .mp3.")
        return True

    # TODO: implementar aqui a l√≥gica de combinar / renomear / mover os MP3s
    log_callback(f"üéôÔ∏è Encontrados {len(mp3s)} arquivos em {tts_dir}: {[p.name for p in mp3s]}")
    # ex:
    #   - concatenar todos em um s√≥
    #   - mover para data/{canal}/{video_id}/audio/‚Ä¶
    #   - atualizar metadados.json com paths dos √°udios gerados

    return True
